#!/usr/bin/env python3
"""
Script de g√©n√©ration des QR codes pour chaque place du stade.
G√©n√®re des QR codes pour les places 1-10 en rang et 1-10 en si√®ge.
"""

import qrcode
import os
from PIL import Image, ImageDraw, ImageFont

def generate_qr_codes():
    """
    G√©n√®re les QR codes pour toutes les places du stade
    """
    print("üéØ G√©n√©ration des QR codes pour le stade...")
    
    # Cr√©er le dossier de sortie
    output_dir = "qr_codes"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    total_codes = 0
    
    # G√©n√©rer QR codes pour chaque place
    for row in range(1, 11):  # Rangs 1-10
        for seat in range(1, 11):  # Si√®ges 1-10
            user_id = f"user_{row}_{seat}"
            
            # Configuration du QR code
            qr = qrcode.QRCode(
                version=1,  # Taille du QR code
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            
            # Ajouter les donn√©es (seulement le user_id)
            qr.add_data(user_id)
            qr.make(fit=True)
            
            # Cr√©er l'image du QR code
            qr_img = qr.make_image(fill_color="black", back_color="white")
            
            # Cr√©er une image plus grande avec du texte
            img_size = 400
            final_img = Image.new('RGB', (img_size, img_size + 60), 'white')
            
            # Redimensionner le QR code
            qr_img = qr_img.resize((img_size - 40, img_size - 40))
            
            # Coller le QR code au centre
            final_img.paste(qr_img, (20, 20))
            
            # Ajouter le texte en bas
            draw = ImageDraw.Draw(final_img)
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 24)
            except OSError:
                font = ImageFont.load_default()
            
            text = f"Rang {row} - Si√®ge {seat}"
            text_bbox = draw.textbbox((0, 0), text, font=font)
            text_width = text_bbox[2] - text_bbox[0]
            text_x = (img_size - text_width) // 2
            
            draw.text((text_x, img_size - 30), text, fill="black", font=font)
            
            # Sauvegarder
            filename = f"{output_dir}/user_{row}_{seat}.png"
            final_img.save(filename)
            
            total_codes += 1
            
            if total_codes % 10 == 0:
                print(f"   G√©n√©r√© {total_codes} QR codes...")
    
    print(f"‚úÖ {total_codes} QR codes g√©n√©r√©s dans le dossier '{output_dir}'")
    print(f"   Format: user_<rang>_<si√®ge>.png")
    print(f"   Contenu QR: 'user_<rang>_<si√®ge>'")
    print(f"   Couverture: 10 rangs √ó 10 si√®ges = 100 places")

def verify_qr_codes():
    """
    V√©rifie quelques QR codes g√©n√©r√©s
    """
    print("\nüîç V√©rification des QR codes...")
    
    import cv2
    
    test_files = [
        "qr_codes/user_1_1.png",
        "qr_codes/user_5_5.png",
        "qr_codes/user_10_10.png"
    ]
    
    for file_path in test_files:
        if os.path.exists(file_path):
            # Lire l'image
            img = cv2.imread(file_path)
            detector = cv2.QRCodeDetector()
            
            # D√©coder le QR code
            data, vertices_array, binary_qrcode = detector.detectAndDecode(img)
            
            if data:
                print(f"   {file_path}: '{data}' ‚úÖ")
            else:
                print(f"   {file_path}: Erreur de lecture ‚ùå")
        else:
            print(f"   {file_path}: Fichier introuvable ‚ùå")

if __name__ == "__main__":
    generate_qr_codes()
    
    # V√©rifier si opencv est disponible pour la v√©rification
    try:
        import cv2
        verify_qr_codes()
    except ImportError:
        print("\nüí° Pour v√©rifier les QR codes, installez opencv-python:")
        print("   pip install opencv-python")